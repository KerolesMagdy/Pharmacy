package com.keroles.Pharmacy.Model.Entity;
// Generated Oct 22, 2021, 2:07:56 PM by Hibernate Tools 4.3.1


import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.keroles.Pharmacy.Constant.ConstantExceptionPhrases;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Email;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import org.hibernate.validator.constraints.Range;
import static com.keroles.Pharmacy.Constant.ConstantDbProperties.*;

/**
 * Users generated by hbm2java
 */
import com.keroles.Pharmacy.Constant.ConstantDbProperties;
@Entity
@Table(name="users"
    ,catalog="pharmacy"
)
//@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class,property = "userId")

public class Users  implements java.io.Serializable {


     private Integer userId;
     private Address address;
     @Size(min = 3,message = ConstantExceptionPhrases.name_limit)
//     @NotBlank(message = ConstantExceptionPhrases.name_is_empty)
     private String userName;
     @Past(message = ConstantExceptionPhrases.DOT_invalid)
     private Date userDob;
//     @Range(min = 10,max = 11, message = ConstantExceptionPhrases.phone_limit)
     private int userPhone;
     @Email
     private String userEmail;
     @Size(min = 8, message = ConstantExceptionPhrases.password_limit)
     private String userPassword;
     private String userImage;
     private Float userLat;
     private Float userLong;
     private Set<Order> orders = new HashSet(0);
     private Set<Logs> logses = new HashSet(0);

    public Users() {
    }

	
    public Users(Address address, String userName, int userPhone, String userEmail, String userPassword) {
        this.address = address;
        this.userName = userName;
        this.userPhone = userPhone;
        this.userEmail = userEmail;
        this.userPassword = userPassword;
    }
    public Users(Address address, String userName, Date userDob, int userPhone, String userEmail, String userPassword, String userImage, Float userLat, Float userLong, Set<Order> orders, Set<Logs> logses) {
       this.address = address;
       this.userName = userName;
       this.userDob = userDob;
       this.userPhone = userPhone;
       this.userEmail = userEmail;
       this.userPassword = userPassword;
       this.userImage = userImage;
       this.userLat = userLat;
       this.userLong = userLong;
       this.orders = orders;
       this.logses = logses;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    @Column(name=table_users_attribut_user_id, unique=true, nullable=false)
    public Integer getUserId() {
        return this.userId;
    }
    
    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    
    @Column(name=table_users_attribut_user_name, nullable=false, length=200)
    public String getUserName() {
        return this.userName;
    }
    
    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Temporal(TemporalType.DATE)
    @Column(name=table_users_attribut_user_dob, length=10)
    public Date getUserDob() {
        return this.userDob;
    }
    
    public void setUserDob(Date userDob) {
        this.userDob = userDob;
    }

    
    @Column(name=table_users_attribut_user_phone, nullable=false)
    public int getUserPhone() {
        return this.userPhone;
    }
    
    public void setUserPhone(int userPhone) {
        this.userPhone = userPhone;
    }

    
    @Column(name=table_users_attribut_user_email, nullable=false, length=50)
    public String getUserEmail() {
        return this.userEmail;
    }
    
    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    
    @Column(name=table_users_attribut_user_password, nullable=false, length=20)
    public String getUserPassword() {
        return this.userPassword;
    }
    
    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }

    
    @Column(name=table_users_attribut_user_image, length=1000)
    public String getUserImage() {
        return this.userImage;
    }
    
    public void setUserImage(String userImage) {
        this.userImage = userImage;
    }

    
    @Column(name=table_users_attribut_user_lat, precision=12, scale=0)
    public Float getUserLat() {
        return this.userLat;
    }
    
    public void setUserLat(Float userLat) {
        this.userLat = userLat;
    }

    
    @Column(name=table_users_attribut_user_long, precision=12, scale=0)
    public Float getUserLong() {
        return this.userLong;
    }
    
    public void setUserLong(Float userLong) {
        this.userLong = userLong;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy= table_users)
@JsonManagedReference(value = "user-order")

    public Set<Order> getOrders() {
        return this.orders;
    }
    
    public void setOrders(Set<Order> orders) {
        this.orders = orders;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy=table_users)
@JsonManagedReference(value = "user-log")
    public Set<Logs> getLogses() {
        return this.logses;
    }
    
    public void setLogses(Set<Logs> logses) {
        this.logses = logses;
    }


@ManyToOne(fetch=FetchType.LAZY)
@JsonBackReference(value = "user-address")
    @JoinColumn(name=table_users_attribut_address_id, nullable=false)
    public Address getAddress() {
        return this.address;
    }
    
    
    public void Transfer(Users user){
        this.userName=user.getUserName()!=null?user.getUserName():null;
        this.userDob=user.getUserDob()!=null?user.getUserDob():null;
        this.userLat=user.getUserLat()!=null?user.getUserLat():null;
        this.userLong=user.getUserLong()!=null?user.getUserLong():null;
        this.userPhone=Integer.valueOf(user.getUserPhone())!=null?user.getUserPhone():null;

    }
}


